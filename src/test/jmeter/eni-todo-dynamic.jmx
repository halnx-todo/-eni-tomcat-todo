<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.6">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan">
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
    </TestPlan>
    <hashTree>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
        <collectionProp name="Arguments.arguments">
          <elementProp name="host" elementType="Argument">
            <stringProp name="Argument.name">host</stringProp>
            <stringProp name="Argument.value">127.0.0.1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="scheme" elementType="Argument">
            <stringProp name="Argument.name">scheme</stringProp>
            <stringProp name="Argument.value">http</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="port" elementType="Argument">
            <stringProp name="Argument.name">port</stringProp>
            <stringProp name="Argument.value">8080</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="webcontext" elementType="Argument">
            <stringProp name="Argument.name">webcontext</stringProp>
            <stringProp name="Argument.value">/eni-todo</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="jquery.version" elementType="Argument">
            <stringProp name="Argument.name">jquery.version</stringProp>
            <stringProp name="Argument.value">3.7.1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="bootstrap.version" elementType="Argument">
            <stringProp name="Argument.name">bootstrap.version</stringProp>
            <stringProp name="Argument.value">5.3.3</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults">
        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
          <collectionProp name="Arguments.arguments"/>
        </elementProp>
        <stringProp name="HTTPSampler.domain">127.0.0.1</stringProp>
        <stringProp name="HTTPSampler.port">8080</stringProp>
      </ConfigTestElement>
      <hashTree/>
      <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager">
        <collectionProp name="CookieManager.cookies"/>
        <boolProp name="CookieManager.clearEachIteration">true</boolProp>
        <boolProp name="CookieManager.controlledByThreadGroup">false</boolProp>
      </CookieManager>
      <hashTree/>
      <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Random Variable">
        <stringProp name="variableName">rvid-mem</stringProp>
        <stringProp name="outputFormat">00000</stringProp>
        <stringProp name="minimumValue">1</stringProp>
        <stringProp name="maximumValue">100000</stringProp>
        <stringProp name="randomSeed"></stringProp>
        <boolProp name="perThread">true</boolProp>
      </RandomVariableConfig>
      <hashTree/>
      <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Random Variable">
        <stringProp name="variableName">rvid</stringProp>
        <stringProp name="outputFormat">00000</stringProp>
        <stringProp name="minimumValue">1</stringProp>
        <stringProp name="maximumValue">100000</stringProp>
        <stringProp name="randomSeed"></stringProp>
        <boolProp name="perThread">true</boolProp>
      </RandomVariableConfig>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group">
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller">
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">0</stringProp>
        <longProp name="ThreadGroup.start_time">1370726934000</longProp>
        <longProp name="ThreadGroup.end_time">1370726934000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <stringProp name="ThreadGroup.on_sample_error">stoptest</stringProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="eni-todo-base">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.port">8080</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">${webcontext}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
          <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Sec-Fetch-Mode" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                <stringProp name="Header.value">navigate</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">${scheme}://${host}:8080/eni-todo/</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Site" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                <stringProp name="Header.value">same-origin</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Origin" elementType="Header">
                <stringProp name="Header.name">Origin</stringProp>
                <stringProp name="Header.value">${scheme}://${host}:8080</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-User" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-User</stringProp>
                <stringProp name="Header.value">?1</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8</stringProp>
              </elementProp>
              <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">X-User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:125.0) Gecko/20100101 Firefox/125.0</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Dest" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                <stringProp name="Header.value">document</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - jquery">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1731114898">&lt;script src=&quot;/eni-todo/webjars/jquery/${jquery.version}/jquery.min.js</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - bootstrap">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1733626665">&lt;script src=&quot;/eni-todo/webjars/bootstrap/${bootstrap.version}/js/bootstrap.min.js</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="eni-todo-base-css">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">${webcontext}/</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
          <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Sec-Fetch-Mode" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                <stringProp name="Header.value">navigate</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">${scheme}://${host}:8080/eni-todo/</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Site" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                <stringProp name="Header.value">same-origin</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Origin" elementType="Header">
                <stringProp name="Header.name">Origin</stringProp>
                <stringProp name="Header.value">${scheme}://${host}:8080</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-User" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-User</stringProp>
                <stringProp name="Header.value">?1</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8</stringProp>
              </elementProp>
              <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">X-User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:125.0) Gecko/20100101 Firefox/125.0</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Dest" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                <stringProp name="Header.value">document</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="eni-todo-base">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">${webcontext}//webjars/jquery/${jquery.version}/jquery.min.js</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
          <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Sec-Fetch-Mode" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                <stringProp name="Header.value">navigate</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">${scheme}://${host}:8080/eni-todo/</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Site" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                <stringProp name="Header.value">same-origin</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Origin" elementType="Header">
                <stringProp name="Header.name">Origin</stringProp>
                <stringProp name="Header.value">${scheme}://${host}:8080</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-User" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-User</stringProp>
                <stringProp name="Header.value">?1</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8</stringProp>
              </elementProp>
              <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">X-User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:125.0) Gecko/20100101 Firefox/125.0</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Dest" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                <stringProp name="Header.value">document</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="eni-todo-create-task-my-task-value">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="name" elementType="HTTPArgument">
                <stringProp name="Argument.name">name</stringProp>
                <stringProp name="Argument.value">my-task-value-${rvid}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="category" elementType="HTTPArgument">
                <stringProp name="Argument.name">category</stringProp>
                <stringProp name="Argument.value">cat-${rvid}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="_onlyinsession" elementType="HTTPArgument">
                <stringProp name="Argument.name">_onlyinsession</stringProp>
                <stringProp name="Argument.value">on</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.port">8080</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">${webcontext}/add</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
          <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Sec-Fetch-Mode" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                <stringProp name="Header.value">navigate</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">${scheme}://${host}:8080/eni-todo/</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Site" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                <stringProp name="Header.value">same-origin</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Origin" elementType="Header">
                <stringProp name="Header.name">Origin</stringProp>
                <stringProp name="Header.value">${scheme}://${host}:8080</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-User" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-User</stringProp>
                <stringProp name="Header.value">?1</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8</stringProp>
              </elementProp>
              <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">X-User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:125.0) Gecko/20100101 Firefox/125.0</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Dest" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                <stringProp name="Header.value">document</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion - my-task-value">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">String respData = prev.getResponseDataAsString();
String taskName=&quot;my-task-value-${rvid}&quot;;
String textStart = &quot;                &lt;td&gt;${taskName}&lt;/td&gt;&quot;;
String valueTag = &quot;name=\&quot;todoList[&quot;;
int pos01 = respData.indexOf(textStart)-80;//valueTag.length();
int pos02 = respData.indexOf(valueTag, pos01);
int pos03 = respData.indexOf(&quot;].id&quot;, pos02+valueTag.length());
String indexFrontValue = &quot;&quot;+(Integer.parseInt(respData.substring(pos02+valueTag.length(), pos03)));

//
valueTag = &quot;value=\&quot;&quot;;
pos01 = respData.indexOf(textStart)-80;//valueTag.length();
pos02 = respData.indexOf(valueTag, pos01);
pos03 = respData.indexOf(&quot;\&quot;&quot;, pos02+valueTag.length());
String indexDtbValue = &quot;&quot;+(Integer.parseInt(respData.substring(pos02+valueTag.length(), pos03)));


vars.put(&quot;task-value-index&quot;,indexFrontValue);
vars.put(&quot;task-value-index-dtb&quot;,indexDtbValue);
log.debug (&quot;pos01 :&quot;+pos01);
log.debug (&quot;pos02 :&quot;+pos02);
log.debug (&quot;pos03 :&quot;+pos03);
log.info (&quot;task-value-index: indexValue :&quot;+indexFrontValue+&quot;-&quot;+indexDtbValue);

String[] inputList = [
                &quot;&lt;td&gt;${taskName}&lt;/td&gt;&quot;,
                &quot;&lt;input type=\&quot;hidden\&quot; id=\&quot;todoList${indexFrontValue}.name\&quot; name=\&quot;todoList[${indexFrontValue}].name\&quot; value=\&quot;${taskName}\&quot;/&gt;&quot;,
                &quot;&lt;td&gt;cat-${rvid}&lt;/td&gt;&lt;input type=\&quot;hidden\&quot; id=\&quot;todoList${indexFrontValue}.category\&quot; name=\&quot;todoList[${indexFrontValue}].category\&quot; value=\&quot;cat-${rvid}\&quot;/&gt;&quot;,
                 &quot;&lt;input type=\&quot;checkbox\&quot; id=\&quot;todoList${indexFrontValue}.onlyinsession1\&quot; name=\&quot;todoList[${indexFrontValue}].onlyinsession\&quot; value=\&quot;true\&quot;/&gt;&lt;input type=\&quot;hidden\&quot; name=\&quot;_todoList[${indexFrontValue}].onlyinsession\&quot; value=\&quot;on\&quot;/&gt;&quot;,
                &quot;&lt;input type=\&quot;checkbox\&quot; id=\&quot;todoList${indexFrontValue}.complete1\&quot; name=\&quot;todoList[${indexFrontValue}].complete\&quot; value=\&quot;true\&quot;/&gt;&lt;input type=\&quot;hidden\&quot; name=\&quot;_todoList[${indexFrontValue}].complete\&quot; value=\&quot;on\&quot;/&gt;&quot;,
                &quot;&lt;input type=\&quot;checkbox\&quot; id=\&quot;todoList${indexFrontValue}.delete1\&quot; name=\&quot;todoList[${indexFrontValue}].delete\&quot; value=\&quot;true\&quot;/&gt;&lt;input type=\&quot;hidden\&quot; name=\&quot;_todoList[${indexFrontValue}].delete\&quot; value=\&quot;on\&quot;/&gt;&quot;];

for(int i=0;i&lt;inputList.length;i++){
	Boolean test = respData.contains(inputList[i]);
	log.debug(&quot;test : &quot;+ inputList[i]);

	if(test != true){
	  AssertionResult.setFailure(true);
	  AssertionResult.setError(true);
	  AssertionResult.setFailureMessage(&quot;Failed for contains &quot;+inputList[i]);
	  SampleResult.setSuccessful(false);
	  return;
	}
}
// no session object
inputList = [
                &quot;&lt;td&gt;my-task-value-draft-${rvid-mem}&lt;/td&gt;&quot;,                
                &quot;value=\&quot;my-task-value-draft-${rvid-mem}\&quot;/&gt;&quot;];

for(int i=0;i&lt;inputList.length;i++){
	Boolean test = respData.contains(inputList[i]);
	log.debug(&quot;test : &quot;+ inputList[i]);

	if(test == true){
	  AssertionResult.setFailure(true);
	  AssertionResult.setError(true);
	  AssertionResult.setFailureMessage(&quot;Failed for contains &quot;+inputList[i]);
	  SampleResult.setSuccessful(false);
	  return;
	}
}
</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Assertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="eni-todo-create-my-task-value-with-image">
          <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
            <collectionProp name="HTTPFileArgs.files">
              <elementProp name="img/test.jpg" elementType="HTTPFileArg">
                <stringProp name="File.mimetype">image/jpeg</stringProp>
                <stringProp name="File.path">img/test.jpg</stringProp>
                <stringProp name="File.paramname">file</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="name" elementType="HTTPArgument">
                <stringProp name="Argument.name">name</stringProp>
                <stringProp name="Argument.value">my-task-value-with-image-${rvid}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="category" elementType="HTTPArgument">
                <stringProp name="Argument.name">category</stringProp>
                <stringProp name="Argument.value">cat-${rvid}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="_onlyinsession" elementType="HTTPArgument">
                <stringProp name="Argument.name">_onlyinsession</stringProp>
                <stringProp name="Argument.value">on</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.port">8080</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">${webcontext}/add</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
          <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Sec-Fetch-Mode" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                <stringProp name="Header.value">navigate</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">${scheme}://${host}:8080/eni-todo/</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Site" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                <stringProp name="Header.value">same-origin</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Origin" elementType="Header">
                <stringProp name="Header.name">Origin</stringProp>
                <stringProp name="Header.value">${scheme}://${host}:8080</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-User" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-User</stringProp>
                <stringProp name="Header.value">?1</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8</stringProp>
              </elementProp>
              <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">X-User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:125.0) Gecko/20100101 Firefox/125.0</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Dest" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                <stringProp name="Header.value">document</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion">
            <collectionProp name="Asserion.test_strings"/>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion - my-task-value-with-image">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">String respData = prev.getResponseDataAsString();
String taskName=&quot;my-task-value-with-image-${rvid}&quot;;
String textStart = &quot;                &lt;td&gt;${taskName}&lt;/td&gt;&quot;;
String valueTag = &quot;name=\&quot;todoList[&quot;;
int pos01 = respData.indexOf(textStart)-80;//valueTag.length();
int pos02 = respData.indexOf(valueTag, pos01);
int pos03 = respData.indexOf(&quot;].id&quot;, pos02+valueTag.length());
String indexFrontValue = &quot;&quot;+(Integer.parseInt(respData.substring(pos02+valueTag.length(), pos03)));
vars.put(&quot;task-value-with-image-index&quot;,indexFrontValue);
//
valueTag = &quot;value=\&quot;&quot;;
pos01 = respData.indexOf(textStart)-80;//valueTag.length();
pos02 = respData.indexOf(valueTag, pos01);
pos03 = respData.indexOf(&quot;\&quot;&quot;, pos02+valueTag.length());
String indexDtbValue = &quot;&quot;+(Integer.parseInt(respData.substring(pos02+valueTag.length(), pos03)));

vars.put(&quot;task-value-with-image-index-dtb&quot;,indexDtbValue);

log.debug (&quot;pos01 :&quot;+pos01);
log.debug (&quot;pos02 :&quot;+pos02);
log.debug (&quot;pos03 :&quot;+pos03);
log.info (&quot;task-value-with-image-index-indexValue :&quot;+indexFrontValue+&quot;-&quot;+indexDtbValue);

String[] inputList = [
                &quot;&lt;td&gt;${taskName}&lt;/td&gt;&quot;,
                &quot;&lt;input type=\&quot;hidden\&quot; id=\&quot;todoList${indexFrontValue}.name\&quot; name=\&quot;todoList[${indexFrontValue}].name\&quot; value=\&quot;${taskName}\&quot;/&gt;&quot;,
                &quot;&lt;td&gt;cat-${rvid}&lt;/td&gt;&lt;input type=\&quot;hidden\&quot; id=\&quot;todoList${indexFrontValue}.category\&quot; name=\&quot;todoList[${indexFrontValue}].category\&quot; value=\&quot;cat-${rvid}\&quot;/&gt;&quot;,
                &quot;&lt;td&gt;&lt;a href=\&quot;/eni-todo/files/test.jpg\&quot; target=\&quot;_blank\&quot;&gt;test.jpg&lt;/a&gt;&lt;/td&gt;&lt;input type=\&quot;hidden\&quot; id=\&quot;todoList${indexFrontValue}.filename\&quot; name=\&quot;todoList[${indexFrontValue}].filename\&quot; value=\&quot;test.jpg\&quot;/&gt;&quot;,
                 &quot;&lt;input type=\&quot;checkbox\&quot; id=\&quot;todoList${indexFrontValue}.onlyinsession1\&quot; name=\&quot;todoList[${indexFrontValue}].onlyinsession\&quot; value=\&quot;true\&quot;/&gt;&lt;input type=\&quot;hidden\&quot; name=\&quot;_todoList[${indexFrontValue}].onlyinsession\&quot; value=\&quot;on\&quot;/&gt;&quot;,
                &quot;&lt;input type=\&quot;checkbox\&quot; id=\&quot;todoList${indexFrontValue}.complete1\&quot; name=\&quot;todoList[${indexFrontValue}].complete\&quot; value=\&quot;true\&quot;/&gt;&lt;input type=\&quot;hidden\&quot; name=\&quot;_todoList[${indexFrontValue}].complete\&quot; value=\&quot;on\&quot;/&gt;&quot;,
                &quot;&lt;input type=\&quot;checkbox\&quot; id=\&quot;todoList${indexFrontValue}.delete1\&quot; name=\&quot;todoList[${indexFrontValue}].delete\&quot; value=\&quot;true\&quot;/&gt;&lt;input type=\&quot;hidden\&quot; name=\&quot;_todoList[${indexFrontValue}].delete\&quot; value=\&quot;on\&quot;/&gt;&quot;];

for(int i=0;i&lt;inputList.length;i++){
	Boolean test = respData.contains(inputList[i]);
	log.debug(&quot;test : &quot;+ inputList[i]);

	if(test != true){
	  AssertionResult.setFailure(true);
	  AssertionResult.setError(true);
	  AssertionResult.setFailureMessage(&quot;Failed for contains &quot;+inputList[i]);
	  SampleResult.setSuccessful(false);
	  return;
	}
}
// no session object
inputList = [
                &quot;&lt;td&gt;my-task-value-draft-${rvid-mem}&lt;/td&gt;&quot;,                
                &quot;value=\&quot;my-task-value-draft-${rvid-mem}\&quot;/&gt;&quot;];

for(int i=0;i&lt;inputList.length;i++){
	Boolean test = respData.contains(inputList[i]);
	log.debug(&quot;test : &quot;+ inputList[i]);

	if(test == true){
	  AssertionResult.setFailure(true);
	  AssertionResult.setError(true);
	  AssertionResult.setFailureMessage(&quot;Failed for contains &quot;+inputList[i]);
	  SampleResult.setSuccessful(false);
	  return;
	}
}
</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Assertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="eni-todo-create-my-task-value-draft">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="name" elementType="HTTPArgument">
                <stringProp name="Argument.name">name</stringProp>
                <stringProp name="Argument.value">my-task-value-draft-${rvid-mem}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="category" elementType="HTTPArgument">
                <stringProp name="Argument.name">category</stringProp>
                <stringProp name="Argument.value">cat-${rvid}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="_onlyinsession" elementType="HTTPArgument">
                <stringProp name="Argument.name">_onlyinsession</stringProp>
                <stringProp name="Argument.value">on</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="onlyinsession" elementType="HTTPArgument">
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">onlyinsession</stringProp>
                <stringProp name="Argument.value">true</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.port">8080</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">${webcontext}/add</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
          <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Sec-Fetch-Mode" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                <stringProp name="Header.value">navigate</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">${scheme}://${host}:8080/eni-todo/</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Site" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                <stringProp name="Header.value">same-origin</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Origin" elementType="Header">
                <stringProp name="Header.name">Origin</stringProp>
                <stringProp name="Header.value">${scheme}://${host}:8080</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-User" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-User</stringProp>
                <stringProp name="Header.value">?1</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8</stringProp>
              </elementProp>
              <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">X-User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:125.0) Gecko/20100101 Firefox/125.0</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Dest" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                <stringProp name="Header.value">document</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion">
            <collectionProp name="Asserion.test_strings"/>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion - my-task-value-draft">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">String respData = prev.getResponseDataAsString();
String taskName=&quot;my-task-value-draft-${rvid-mem}&quot;;
String textStart = &quot;                &lt;td&gt;${taskName}&lt;/td&gt;&quot;;

String valueTag = &quot;name=\&quot;todoList[&quot;;
int pos01 = respData.indexOf(textStart)-80;//valueTag.length();
int pos02 = respData.indexOf(valueTag, pos01);
int pos03 = respData.indexOf(&quot;].id&quot;, pos02+valueTag.length());
String indexFrontValue = &quot;&quot;+(Integer.parseInt(respData.substring(pos02+valueTag.length(), pos03)));
vars.put(&quot;task-value-draft-index&quot;,indexFrontValue);

valueTag = &quot;value=\&quot;&quot;;
pos01 = respData.indexOf(textStart)-80;//valueTag.length();
pos02 = respData.indexOf(valueTag, pos01);
pos03 = respData.indexOf(&quot;\&quot;&quot;, pos02+valueTag.length());
String indexDtbValue = &quot;&quot;+(Integer.parseInt(respData.substring(pos02+valueTag.length(), pos03)));
vars.put(&quot;task-value-draft-index-dtb&quot;,indexDtbValue);

log.debug (&quot;pos01 :&quot;+pos01);
log.debug (&quot;pos02 :&quot;+pos02);
log.debug (&quot;pos03 :&quot;+pos03);
log.info (&quot;task-value-draft-index-indexValue :&quot;+indexFrontValue+&quot;-&quot;+indexDtbValue);

String[] inputList = [
                &quot;&lt;td&gt;my-task-value-draft-${rvid-mem}&lt;/td&gt;&quot;,                
                &quot;value=\&quot;my-task-value-draft-${rvid-mem}\&quot;/&gt;&quot;];

for(int i=0;i&lt;inputList.length;i++){
	Boolean test = respData.contains(inputList[i]);
	log.debug(&quot;test : &quot;+ inputList[i]);

	if(test != true){
	  AssertionResult.setFailure(true);
	  AssertionResult.setError(true);
	  AssertionResult.setFailureMessage(&quot;Failed for contains &quot;+inputList[i]);
	  SampleResult.setSuccessful(false);
	  return;
	}
}</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Assertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="eni-todo-create-my-task-value-while-having-draft">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="name" elementType="HTTPArgument">
                <stringProp name="Argument.name">name</stringProp>
                <stringProp name="Argument.value">my-task-value-while-having-draft-${rvid}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="category" elementType="HTTPArgument">
                <stringProp name="Argument.name">category</stringProp>
                <stringProp name="Argument.value">cat-${rvid}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="_onlyinsession" elementType="HTTPArgument">
                <stringProp name="Argument.name">_onlyinsession</stringProp>
                <stringProp name="Argument.value">on</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.port">8080</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">${webcontext}/add</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
          <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Sec-Fetch-Mode" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                <stringProp name="Header.value">navigate</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">${scheme}://${host}:8080/eni-todo/</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Site" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                <stringProp name="Header.value">same-origin</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Origin" elementType="Header">
                <stringProp name="Header.name">Origin</stringProp>
                <stringProp name="Header.value">${scheme}://${host}:8080</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-User" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-User</stringProp>
                <stringProp name="Header.value">?1</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8</stringProp>
              </elementProp>
              <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">X-User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:125.0) Gecko/20100101 Firefox/125.0</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Dest" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                <stringProp name="Header.value">document</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion - my-task-value-while-having-draft">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">String respData = prev.getResponseDataAsString();

// mets a jour mon index de draft
String taskName=&quot;my-task-value-draft-${rvid-mem}&quot;;
String textStart = &quot;                &lt;td&gt;${taskName}&lt;/td&gt;&quot;;

String valueTag = &quot;name=\&quot;todoList[&quot;;
int pos01 = respData.indexOf(textStart)-80;//valueTag.length();
int pos02 = respData.indexOf(valueTag, pos01);
int pos03 = respData.indexOf(&quot;].id&quot;, pos02+valueTag.length());
indexFrontValue = &quot;&quot;+(Integer.parseInt(respData.substring(pos02+valueTag.length(), pos03)));
vars.put(&quot;task-value-draft-index&quot;,indexFrontValue);

valueTag = &quot;value=\&quot;&quot;;
pos01 = respData.indexOf(textStart)-80;//valueTag.length();
pos02 = respData.indexOf(valueTag, pos01);
pos03 = respData.indexOf(&quot;\&quot;&quot;, pos02+valueTag.length());
indexDtbValue = &quot;&quot;+(Integer.parseInt(respData.substring(pos02+valueTag.length(), pos03)));
vars.put(&quot;task-value-draft-index-dtb&quot;,indexDtbValue);

log.debug (&quot;pos01 :&quot;+pos01);
log.debug (&quot;pos02 :&quot;+pos02);
log.debug (&quot;pos03 :&quot;+pos03);
log.info (&quot;task-value-draft-index-indexValue :&quot;+indexFrontValue+&quot;-&quot;+indexDtbValue);
//
taskName=&quot;my-task-value-while-having-draft-${rvid}&quot;;
textStart = &quot;                &lt;td&gt;${taskName}&lt;/td&gt;&quot;;
valueTag = &quot;name=\&quot;todoList[&quot;;
pos01 = respData.indexOf(textStart)-80;//valueTag.length();
pos02 = respData.indexOf(valueTag, pos01);
pos03 = respData.indexOf(&quot;].id&quot;, pos02+valueTag.length());
indexFrontValue = &quot;&quot;+(Integer.parseInt(respData.substring(pos02+valueTag.length(), pos03)));
vars.put(&quot;task-value-while-having-draft-index&quot;,indexFrontValue);

valueTag = &quot;value=\&quot;&quot;;
pos01 = respData.indexOf(textStart)-80;//valueTag.length();
pos02 = respData.indexOf(valueTag, pos01);
pos03 = respData.indexOf(&quot;\&quot;&quot;, pos02+valueTag.length());
String indexDtbValue = &quot;&quot;+(Integer.parseInt(respData.substring(pos02+valueTag.length(), pos03)));

vars.put(&quot;task-value-while-having-draft-index-dtb&quot;,indexDtbValue);



log.debug (&quot;pos01 :&quot;+pos01);
log.debug (&quot;pos02 :&quot;+pos02);
log.debug (&quot;pos03 :&quot;+pos03);
log.info (&quot;task-value-while-having-draft-index-indexValue :&quot;+indexFrontValue+&quot;-&quot;+indexDtbValue);

String[] inputList = [
                &quot;&lt;td&gt;${taskName}&lt;/td&gt;&quot;,
                &quot;&lt;input type=\&quot;hidden\&quot; id=\&quot;todoList${indexFrontValue}.name\&quot; name=\&quot;todoList[${indexFrontValue}].name\&quot; value=\&quot;${taskName}\&quot;/&gt;&quot;,
                &quot;&lt;td&gt;cat-${rvid}&lt;/td&gt;&lt;input type=\&quot;hidden\&quot; id=\&quot;todoList${indexFrontValue}.category\&quot; name=\&quot;todoList[${indexFrontValue}].category\&quot; value=\&quot;cat-${rvid}\&quot;/&gt;&quot;,
                 &quot;&lt;input type=\&quot;checkbox\&quot; id=\&quot;todoList${indexFrontValue}.onlyinsession1\&quot; name=\&quot;todoList[${indexFrontValue}].onlyinsession\&quot; value=\&quot;true\&quot;/&gt;&lt;input type=\&quot;hidden\&quot; name=\&quot;_todoList[${indexFrontValue}].onlyinsession\&quot; value=\&quot;on\&quot;/&gt;&quot;,
                &quot;&lt;input type=\&quot;checkbox\&quot; id=\&quot;todoList${indexFrontValue}.complete1\&quot; name=\&quot;todoList[${indexFrontValue}].complete\&quot; value=\&quot;true\&quot;/&gt;&lt;input type=\&quot;hidden\&quot; name=\&quot;_todoList[${indexFrontValue}].complete\&quot; value=\&quot;on\&quot;/&gt;&quot;,
                &quot;&lt;input type=\&quot;checkbox\&quot; id=\&quot;todoList${indexFrontValue}.delete1\&quot; name=\&quot;todoList[${indexFrontValue}].delete\&quot; value=\&quot;true\&quot;/&gt;&lt;input type=\&quot;hidden\&quot; name=\&quot;_todoList[${indexFrontValue}].delete\&quot; value=\&quot;on\&quot;/&gt;&quot;,
                &quot;&lt;td&gt;my-task-value-draft-${rvid-mem}&lt;/td&gt;&quot;];

for(int i=0;i&lt;inputList.length;i++){
	Boolean test = respData.contains(inputList[i]);
	log.debug(&quot;test : &quot;+ inputList[i]);

	if(test != true){
	  AssertionResult.setFailure(true);
	  AssertionResult.setError(true);
	  AssertionResult.setFailureMessage(&quot;Failed for contains &quot;+inputList[i]);
	  SampleResult.setSuccessful(false);
	  return;
	}
}
</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Assertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="eni-todo-check-/files/test.jpg">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/eni-todo/files/test.jpg</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
          <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Sec-Fetch-Mode" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                <stringProp name="Header.value">navigate</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">${scheme}://${host}:8080/eni-todo/</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Site" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                <stringProp name="Header.value">same-origin</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Origin" elementType="Header">
                <stringProp name="Header.name">Origin</stringProp>
                <stringProp name="Header.value">${scheme}://${host}:8080</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-User" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-User</stringProp>
                <stringProp name="Header.value">?1</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8</stringProp>
              </elementProp>
              <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">X-User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:125.0) Gecko/20100101 Firefox/125.0</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Dest" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                <stringProp name="Header.value">document</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="eni-todo-check-/files/test.jpg">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/eni-todo/files/test.jpg</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
          <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Sec-Fetch-Mode" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                <stringProp name="Header.value">navigate</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">${scheme}://${host}:8080/eni-todo/</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Site" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                <stringProp name="Header.value">same-origin</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Origin" elementType="Header">
                <stringProp name="Header.name">Origin</stringProp>
                <stringProp name="Header.value">${scheme}://${host}:8080</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-User" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-User</stringProp>
                <stringProp name="Header.value">?1</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8</stringProp>
              </elementProp>
              <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">X-User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:125.0) Gecko/20100101 Firefox/125.0</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Dest" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                <stringProp name="Header.value">document</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="eni-todo-base-check">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.port">8080</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">${webcontext}/</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
          <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Sec-Fetch-Mode" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                <stringProp name="Header.value">navigate</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">${scheme}://${host}:8080/eni-todo/</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Site" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                <stringProp name="Header.value">same-origin</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Origin" elementType="Header">
                <stringProp name="Header.name">Origin</stringProp>
                <stringProp name="Header.value">${scheme}://${host}:8080</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-User" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-User</stringProp>
                <stringProp name="Header.value">?1</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8</stringProp>
              </elementProp>
              <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">X-User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:125.0) Gecko/20100101 Firefox/125.0</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Dest" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                <stringProp name="Header.value">document</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - jquery">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1731114898">&lt;script src=&quot;/eni-todo/webjars/jquery/${jquery.version}/jquery.min.js</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - bootstrap">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1733626665">&lt;script src=&quot;/eni-todo/webjars/bootstrap/${bootstrap.version}/js/bootstrap.min.js</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">String respData = prev.getResponseDataAsString();

String taskName=&quot;my-task-value-${rvid}&quot;;
String indexFrontValue = vars.get(&quot;task-value-index&quot;);

log.info (&quot;---indexFrontValue :&quot;+indexFrontValue);

String[] inputList = [
                &quot;&lt;td&gt;${taskName}&lt;/td&gt;&quot;,
                &quot;&lt;input type=\&quot;hidden\&quot; id=\&quot;todoList${indexFrontValue}.name\&quot; name=\&quot;todoList[${indexFrontValue}].name\&quot; value=\&quot;${taskName}\&quot;/&gt;&quot;,
                &quot;&lt;td&gt;cat-${rvid}&lt;/td&gt;&lt;input type=\&quot;hidden\&quot; id=\&quot;todoList${indexFrontValue}.category\&quot; name=\&quot;todoList[${indexFrontValue}].category\&quot; value=\&quot;cat-${rvid}\&quot;/&gt;&quot;,
                 &quot;&lt;input type=\&quot;checkbox\&quot; id=\&quot;todoList${indexFrontValue}.onlyinsession1\&quot; name=\&quot;todoList[${indexFrontValue}].onlyinsession\&quot; value=\&quot;true\&quot;/&gt;&lt;input type=\&quot;hidden\&quot; name=\&quot;_todoList[${indexFrontValue}].onlyinsession\&quot; value=\&quot;on\&quot;/&gt;&quot;,
                &quot;&lt;input type=\&quot;checkbox\&quot; id=\&quot;todoList${indexFrontValue}.complete1\&quot; name=\&quot;todoList[${indexFrontValue}].complete\&quot; value=\&quot;true\&quot;/&gt;&lt;input type=\&quot;hidden\&quot; name=\&quot;_todoList[${indexFrontValue}].complete\&quot; value=\&quot;on\&quot;/&gt;&quot;,
                &quot;&lt;input type=\&quot;checkbox\&quot; id=\&quot;todoList${indexFrontValue}.delete1\&quot; name=\&quot;todoList[${indexFrontValue}].delete\&quot; value=\&quot;true\&quot;/&gt;&lt;input type=\&quot;hidden\&quot; name=\&quot;_todoList[${indexFrontValue}].delete\&quot; value=\&quot;on\&quot;/&gt;&quot;];

for(int i=0;i&lt;inputList.length;i++){
	Boolean test = respData.contains(inputList[i]);
	log.debug(&quot;test : &quot;+ inputList[i]);

	if(test != true){
	  AssertionResult.setFailure(true);
	  AssertionResult.setError(true);
	  AssertionResult.setFailureMessage(&quot;Failed for contains &quot;+inputList[i]);
	  SampleResult.setSuccessful(false);
	  return;
	}
}
</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Assertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="eni-todo-complete-my-task-value-while-having-draft">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="todoList[${task-value-index}].id" elementType="HTTPArgument">
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">todoList[${task-value-index}].id</stringProp>
                <stringProp name="Argument.value">${task-value-index-dtb}</stringProp>
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
              </elementProp>
              <elementProp name="todoList[${task-value-index}].name" elementType="HTTPArgument">
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">todoList[${task-value-index}].name</stringProp>
                <stringProp name="Argument.value">my-task-value-${rvid}</stringProp>
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
              </elementProp>
              <elementProp name="todoList[${task-value-index}].category" elementType="HTTPArgument">
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">todoList[${task-value-index}].category</stringProp>
                <stringProp name="Argument.value">cat-${rvid}</stringProp>
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
              </elementProp>
              <elementProp name="todoList[${task-value-index}].filename" elementType="HTTPArgument">
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">todoList[${task-value-index}].filename</stringProp>
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
              </elementProp>
              <elementProp name="_todoList[${task-value-index}].onlyinsession" elementType="HTTPArgument">
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">_todoList[${task-value-index}].onlyinsession</stringProp>
                <stringProp name="Argument.value">on</stringProp>
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
              </elementProp>
              <elementProp name="_todoList[${task-value-index}].complete" elementType="HTTPArgument">
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">_todoList[${task-value-index}].complete</stringProp>
                <stringProp name="Argument.value">on</stringProp>
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
              </elementProp>
              <elementProp name="_todoList[${task-value-index}].delete" elementType="HTTPArgument">
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">_todoList[${task-value-index}].delete</stringProp>
                <stringProp name="Argument.value">on</stringProp>
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
              </elementProp>
              <elementProp name="todoList[${task-value-with-image-index}].id" elementType="HTTPArgument">
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">todoList[${task-value-with-image-index}].id</stringProp>
                <stringProp name="Argument.value">${task-value-with-image-index-dtb}</stringProp>
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
              </elementProp>
              <elementProp name="todoList[${task-value-with-image-index}].name" elementType="HTTPArgument">
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">todoList[${task-value-with-image-index}].name</stringProp>
                <stringProp name="Argument.value">my-task-value-with-image-${rvid}</stringProp>
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
              </elementProp>
              <elementProp name="todoList[${task-value-with-image-index}].category" elementType="HTTPArgument">
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">todoList[${task-value-with-image-index}].category</stringProp>
                <stringProp name="Argument.value">cat-${rvid}</stringProp>
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
              </elementProp>
              <elementProp name="todoList[${task-value-with-image-index}].filename" elementType="HTTPArgument">
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">todoList[${task-value-with-image-index}].filename</stringProp>
                <stringProp name="Argument.value">test.jpg</stringProp>
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
              </elementProp>
              <elementProp name="_todoList[${task-value-with-image-index}].onlyinsession" elementType="HTTPArgument">
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">_todoList[${task-value-with-image-index}].onlyinsession</stringProp>
                <stringProp name="Argument.value">on</stringProp>
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
              </elementProp>
              <elementProp name="_todoList[${task-value-with-image-index}].complete" elementType="HTTPArgument">
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">_todoList[${task-value-with-image-index}].complete</stringProp>
                <stringProp name="Argument.value">on</stringProp>
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
              </elementProp>
              <elementProp name="_todoList[${task-value-with-image-index}].delete" elementType="HTTPArgument">
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">_todoList[${task-value-with-image-index}].delete</stringProp>
                <stringProp name="Argument.value">on</stringProp>
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
              </elementProp>
              <elementProp name="todoList[${task-value-while-having-draft-index}].id" elementType="HTTPArgument">
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">todoList[${task-value-while-having-draft-index}].id</stringProp>
                <stringProp name="Argument.value">${task-value-while-having-draft-index-dtb}</stringProp>
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
              </elementProp>
              <elementProp name="todoList[${task-value-while-having-draft-index}].name" elementType="HTTPArgument">
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">todoList[${task-value-while-having-draft-index}].name</stringProp>
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.value">my-task-value-while-having-draft-${rvid}</stringProp>
              </elementProp>
              <elementProp name="todoList[${task-value-while-having-draft-index}].category" elementType="HTTPArgument">
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">todoList[${task-value-while-having-draft-index}].category</stringProp>
                <stringProp name="Argument.value">cat-${rvid}</stringProp>
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
              </elementProp>
              <elementProp name="todoList[${task-value-while-having-draft-index}].filename" elementType="HTTPArgument">
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">todoList[${task-value-while-having-draft-index}].filename</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
              </elementProp>
              <elementProp name="todoList[${task-value-while-having-draft-index}].complete" elementType="HTTPArgument">
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">todoList[${task-value-while-having-draft-index}].complete</stringProp>
                <stringProp name="Argument.value">true</stringProp>
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
              </elementProp>
              <elementProp name="_todoList[${task-value-while-having-draft-index}].onlyinsession" elementType="HTTPArgument">
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">_todoList[${task-value-while-having-draft-index}].onlyinsession</stringProp>
                <stringProp name="Argument.value">on</stringProp>
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
              </elementProp>
              <elementProp name="_todoList[${task-value-while-having-draft-index}].delete" elementType="HTTPArgument">
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">_todoList[${task-value-while-having-draft-index}].delete</stringProp>
                <stringProp name="Argument.value">on</stringProp>
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
              </elementProp>
              <elementProp name="todoList[${task-value-draft-index}].id" elementType="HTTPArgument">
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">todoList[${task-value-draft-index}].id</stringProp>
                <stringProp name="Argument.value">${task-value-draft-index-dtb}</stringProp>
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
              </elementProp>
              <elementProp name="todoList[${task-value-draft-index}].name" elementType="HTTPArgument">
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">todoList[${task-value-draft-index}].name</stringProp>
                <stringProp name="Argument.value">my-task-value-draft-${rvid-mem}</stringProp>
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
              </elementProp>
              <elementProp name="todoList[${task-value-draft-index}].category" elementType="HTTPArgument">
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">todoList[${task-value-draft-index}].category</stringProp>
                <stringProp name="Argument.value">cat-${rvid}</stringProp>
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
              </elementProp>
              <elementProp name="todoList[${task-value-draft-index}].filename" elementType="HTTPArgument">
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">todoList[${task-value-draft-index}].filename</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
              </elementProp>
              <elementProp name="todoList[${task-value-draft-index}].onlyinsession" elementType="HTTPArgument">
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">todoList[${task-value-draft-index}].onlyinsession</stringProp>
                <stringProp name="Argument.value">true</stringProp>
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
              </elementProp>
              <elementProp name="_todoList[${task-value-draft-index}].onlyinsession" elementType="HTTPArgument">
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">_todoList[${task-value-draft-index}].onlyinsession</stringProp>
                <stringProp name="Argument.value">on</stringProp>
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
              </elementProp>
              <elementProp name="_todoList[${task-value-draft-index}].complete" elementType="HTTPArgument">
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">_todoList[${task-value-draft-index}].complete</stringProp>
                <stringProp name="Argument.value">on</stringProp>
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
              </elementProp>
              <elementProp name="_todoList[${task-value-draft-index}].delete" elementType="HTTPArgument">
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">_todoList[${task-value-draft-index}].delete</stringProp>
                <stringProp name="Argument.value">on</stringProp>
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.port">8080</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">${webcontext}/update</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
          <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Sec-Fetch-Mode" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                <stringProp name="Header.value">navigate</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">${scheme}://${host}:8080/eni-todo/</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Site" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                <stringProp name="Header.value">same-origin</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Origin" elementType="Header">
                <stringProp name="Header.name">Origin</stringProp>
                <stringProp name="Header.value">${scheme}://${host}:8080</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-User" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-User</stringProp>
                <stringProp name="Header.value">?1</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8</stringProp>
              </elementProp>
              <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">X-User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:125.0) Gecko/20100101 Firefox/125.0</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Dest" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                <stringProp name="Header.value">document</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">X-debug</stringProp>
                <stringProp name="Header.value">${rvid}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">String respData = prev.getResponseDataAsString();

String taskName=&quot;my-task-value-while-having-draft-${rvid}&quot;;
String indexValueDtb = vars.get(&quot;task-value-while-having-draft-index-dtb&quot;);
String indexValueFront = vars.get(&quot;task-value-while-having-draft-index&quot;);


log.info (&quot;indexValueDtb :&quot;+indexValueDtb);

String[] inputList = [
                &quot;&lt;td&gt;${taskName}&lt;/td&gt;&quot;,
                &quot;&lt;input type=\&quot;hidden\&quot; id=\&quot;todoList${indexValueFront}.name\&quot; name=\&quot;todoList[${indexValueFront}].name\&quot; value=\&quot;${taskName}\&quot;/&gt;&quot;,
                &quot;&lt;td&gt;cat-${rvid}&lt;/td&gt;&lt;input type=\&quot;hidden\&quot; id=\&quot;todoList${indexValueFront}.category\&quot; name=\&quot;todoList[${indexValueFront}].category\&quot; value=\&quot;cat-${rvid}\&quot;/&gt;&quot;,
                 &quot;&lt;input type=\&quot;checkbox\&quot; id=\&quot;todoList${indexValueFront}.onlyinsession1\&quot; name=\&quot;todoList[${indexValueFront}].onlyinsession\&quot; value=\&quot;true\&quot;/&gt;&lt;input type=\&quot;hidden\&quot; name=\&quot;_todoList[${indexValueFront}].onlyinsession\&quot; value=\&quot;on\&quot;/&gt;&quot;,
                &quot;&lt;input type=\&quot;checkbox\&quot; checked=\&quot;checked\&quot; id=\&quot;todoList${indexValueFront}.complete1\&quot; name=\&quot;todoList[${indexValueFront}].complete\&quot; value=\&quot;true\&quot;/&gt;&lt;input type=\&quot;hidden\&quot; name=\&quot;_todoList[${indexValueFront}].complete\&quot; value=\&quot;on\&quot;/&gt;&quot;,
                &quot;&lt;input type=\&quot;checkbox\&quot; id=\&quot;todoList${indexValueFront}.delete1\&quot; name=\&quot;todoList[${indexValueFront}].delete\&quot; value=\&quot;true\&quot;/&gt;&lt;input type=\&quot;hidden\&quot; name=\&quot;_todoList[${indexValueFront}].delete\&quot; value=\&quot;on\&quot;/&gt;&quot;,
                &quot;&lt;td&gt;my-task-value-draft-${rvid-mem}&lt;/td&gt;&quot;];

for(int i=0;i&lt;inputList.length;i++){
	Boolean test = respData.contains(inputList[i]);
	log.info(&quot;test : &quot;+ inputList[i]);

	if(test != true){
	  AssertionResult.setFailure(true);
	  AssertionResult.setError(true);
	  AssertionResult.setFailureMessage(&quot;Failed for contains &quot;+inputList[i]);
	  SampleResult.setSuccessful(false);
	  return;
	}
}
</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Assertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="eni-todo-complete-my-task-value-with-image">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="todoList[${task-value-index}].id" elementType="HTTPArgument">
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">todoList[${task-value-index}].id</stringProp>
                <stringProp name="Argument.value">${task-value-index-dtb}</stringProp>
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
              </elementProp>
              <elementProp name="todoList[${task-value-index}].name" elementType="HTTPArgument">
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">todoList[${task-value-index}].name</stringProp>
                <stringProp name="Argument.value">my-task-value-${rvid}</stringProp>
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
              </elementProp>
              <elementProp name="todoList[${task-value-index}].category" elementType="HTTPArgument">
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">todoList[${task-value-index}].category</stringProp>
                <stringProp name="Argument.value">cat-${rvid}</stringProp>
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
              </elementProp>
              <elementProp name="todoList[${task-value-index}].filename" elementType="HTTPArgument">
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">todoList[${task-value-index}].filename</stringProp>
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
              </elementProp>
              <elementProp name="_todoList[${task-value-index}].onlyinsession" elementType="HTTPArgument">
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">_todoList[${task-value-index}].onlyinsession</stringProp>
                <stringProp name="Argument.value">on</stringProp>
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
              </elementProp>
              <elementProp name="_todoList[${task-value-index}].complete" elementType="HTTPArgument">
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">_todoList[${task-value-index}].complete</stringProp>
                <stringProp name="Argument.value">on</stringProp>
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
              </elementProp>
              <elementProp name="_todoList[${task-value-index}].delete" elementType="HTTPArgument">
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">_todoList[${task-value-index}].delete</stringProp>
                <stringProp name="Argument.value">on</stringProp>
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
              </elementProp>
              <elementProp name="todoList[${task-value-with-image-index}].id" elementType="HTTPArgument">
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">todoList[${task-value-with-image-index}].id</stringProp>
                <stringProp name="Argument.value">${task-value-with-image-index-dtb}</stringProp>
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
              </elementProp>
              <elementProp name="todoList[${task-value-with-image-index}].name" elementType="HTTPArgument">
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">todoList[${task-value-with-image-index}].name</stringProp>
                <stringProp name="Argument.value">my-task-value-with-image-${rvid}</stringProp>
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
              </elementProp>
              <elementProp name="todoList[${task-value-with-image-index}].category" elementType="HTTPArgument">
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">todoList[${task-value-with-image-index}].category</stringProp>
                <stringProp name="Argument.value">cat-${rvid}</stringProp>
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
              </elementProp>
              <elementProp name="todoList[${task-value-with-image-index}].filename" elementType="HTTPArgument">
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">todoList[${task-value-with-image-index}].filename</stringProp>
                <stringProp name="Argument.value">test.jpg</stringProp>
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
              </elementProp>
              <elementProp name="_todoList[${task-value-with-image-index}].onlyinsession" elementType="HTTPArgument">
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">_todoList[${task-value-with-image-index}].onlyinsession</stringProp>
                <stringProp name="Argument.value">on</stringProp>
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
              </elementProp>
              <elementProp name="_todoList[${task-value-with-image-index}].complete" elementType="HTTPArgument">
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">_todoList[${task-value-with-image-index}].complete</stringProp>
                <stringProp name="Argument.value">on</stringProp>
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
              </elementProp>
              <elementProp name="todoList[${task-value-with-image-index}].complete" elementType="HTTPArgument">
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">todoList[${task-value-with-image-index}].complete</stringProp>
                <stringProp name="Argument.value">true</stringProp>
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
              </elementProp>
              <elementProp name="_todoList[${task-value-with-image-index}].delete" elementType="HTTPArgument">
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">_todoList[${task-value-with-image-index}].delete</stringProp>
                <stringProp name="Argument.value">on</stringProp>
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
              </elementProp>
              <elementProp name="todoList[${task-value-while-having-draft-index}].id" elementType="HTTPArgument">
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">todoList[${task-value-while-having-draft-index}].id</stringProp>
                <stringProp name="Argument.value">${task-value-while-having-draft-index-dtb}</stringProp>
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
              </elementProp>
              <elementProp name="todoList[${task-value-while-having-draft-index}].name" elementType="HTTPArgument">
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">todoList[${task-value-while-having-draft-index}].name</stringProp>
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.value">my-task-value-while-having-draft-${rvid}</stringProp>
              </elementProp>
              <elementProp name="todoList[${task-value-while-having-draft-index}].category" elementType="HTTPArgument">
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">todoList[${task-value-while-having-draft-index}].category</stringProp>
                <stringProp name="Argument.value">cat-${rvid}</stringProp>
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
              </elementProp>
              <elementProp name="todoList[${task-value-while-having-draft-index}].filename" elementType="HTTPArgument">
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">todoList[${task-value-while-having-draft-index}].filename</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
              </elementProp>
              <elementProp name="todoList[${task-value-while-having-draft-index}].complete" elementType="HTTPArgument">
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">todoList[${task-value-while-having-draft-index}].complete</stringProp>
                <stringProp name="Argument.value">true</stringProp>
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
              </elementProp>
              <elementProp name="_todoList[${task-value-while-having-draft-index}].onlyinsession" elementType="HTTPArgument">
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">_todoList[${task-value-while-having-draft-index}].onlyinsession</stringProp>
                <stringProp name="Argument.value">on</stringProp>
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
              </elementProp>
              <elementProp name="_todoList[${task-value-while-having-draft-index}].delete" elementType="HTTPArgument">
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">_todoList[${task-value-while-having-draft-index}].delete</stringProp>
                <stringProp name="Argument.value">on</stringProp>
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
              </elementProp>
              <elementProp name="todoList[${task-value-draft-index}].id" elementType="HTTPArgument">
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">todoList[${task-value-draft-index}].id</stringProp>
                <stringProp name="Argument.value">${task-value-draft-index-dtb}</stringProp>
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
              </elementProp>
              <elementProp name="todoList[${task-value-draft-index}].name" elementType="HTTPArgument">
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">todoList[${task-value-draft-index}].name</stringProp>
                <stringProp name="Argument.value">my-task-value-draft-${rvid-mem}</stringProp>
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
              </elementProp>
              <elementProp name="todoList[${task-value-draft-index}].category" elementType="HTTPArgument">
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">todoList[${task-value-draft-index}].category</stringProp>
                <stringProp name="Argument.value">cat-${rvid}</stringProp>
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
              </elementProp>
              <elementProp name="todoList[${task-value-draft-index}].filename" elementType="HTTPArgument">
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">todoList[${task-value-draft-index}].filename</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
              </elementProp>
              <elementProp name="todoList[${task-value-draft-index}].onlyinsession" elementType="HTTPArgument">
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">todoList[${task-value-draft-index}].onlyinsession</stringProp>
                <stringProp name="Argument.value">true</stringProp>
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
              </elementProp>
              <elementProp name="_todoList[${task-value-draft-index}].onlyinsession" elementType="HTTPArgument">
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">_todoList[${task-value-draft-index}].onlyinsession</stringProp>
                <stringProp name="Argument.value">on</stringProp>
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
              </elementProp>
              <elementProp name="_todoList[${task-value-draft-index}].complete" elementType="HTTPArgument">
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">_todoList[${task-value-draft-index}].complete</stringProp>
                <stringProp name="Argument.value">on</stringProp>
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
              </elementProp>
              <elementProp name="_todoList[${task-value-draft-index}].delete" elementType="HTTPArgument">
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">_todoList[${task-value-draft-index}].delete</stringProp>
                <stringProp name="Argument.value">on</stringProp>
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.port">8080</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">${webcontext}/update</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
          <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Sec-Fetch-Mode" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                <stringProp name="Header.value">navigate</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">${scheme}://${host}:8080/eni-todo/</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Site" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                <stringProp name="Header.value">same-origin</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Origin" elementType="Header">
                <stringProp name="Header.name">Origin</stringProp>
                <stringProp name="Header.value">${scheme}://${host}:8080</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-User" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-User</stringProp>
                <stringProp name="Header.value">?1</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8</stringProp>
              </elementProp>
              <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">X-User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:125.0) Gecko/20100101 Firefox/125.0</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Dest" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                <stringProp name="Header.value">document</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">X-debug</stringProp>
                <stringProp name="Header.value">${rvid}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">String respData = prev.getResponseDataAsString();

String taskName=&quot;my-task-value-with-image-${rvid}&quot;;
String indexValueDtb = vars.get(&quot;task-value-with-image-index-dtb&quot;);
String indexValueFront = vars.get(&quot;task-value-with-image-index&quot;);


log.info (&quot;indexValueDtb :&quot;+indexValueDtb);

String[] inputList = [
                &quot;&lt;td&gt;${taskName}&lt;/td&gt;&quot;,
                &quot;&lt;input type=\&quot;hidden\&quot; id=\&quot;todoList${indexValueFront}.name\&quot; name=\&quot;todoList[${indexValueFront}].name\&quot; value=\&quot;${taskName}\&quot;/&gt;&quot;,
                &quot;&lt;td&gt;cat-${rvid}&lt;/td&gt;&lt;input type=\&quot;hidden\&quot; id=\&quot;todoList${indexValueFront}.category\&quot; name=\&quot;todoList[${indexValueFront}].category\&quot; value=\&quot;cat-${rvid}\&quot;/&gt;&quot;,
                 &quot;&lt;input type=\&quot;checkbox\&quot; id=\&quot;todoList${indexValueFront}.onlyinsession1\&quot; name=\&quot;todoList[${indexValueFront}].onlyinsession\&quot; value=\&quot;true\&quot;/&gt;&lt;input type=\&quot;hidden\&quot; name=\&quot;_todoList[${indexValueFront}].onlyinsession\&quot; value=\&quot;on\&quot;/&gt;&quot;,
                &quot;&lt;input type=\&quot;checkbox\&quot; checked=\&quot;checked\&quot; id=\&quot;todoList${indexValueFront}.complete1\&quot; name=\&quot;todoList[${indexValueFront}].complete\&quot; value=\&quot;true\&quot;/&gt;&lt;input type=\&quot;hidden\&quot; name=\&quot;_todoList[${indexValueFront}].complete\&quot; value=\&quot;on\&quot;/&gt;&quot;,
                &quot;&lt;input type=\&quot;checkbox\&quot; id=\&quot;todoList${indexValueFront}.delete1\&quot; name=\&quot;todoList[${indexValueFront}].delete\&quot; value=\&quot;true\&quot;/&gt;&lt;input type=\&quot;hidden\&quot; name=\&quot;_todoList[${indexValueFront}].delete\&quot; value=\&quot;on\&quot;/&gt;&quot;,
                &quot;&lt;td&gt;my-task-value-draft-${rvid-mem}&lt;/td&gt;&quot;];

for(int i=0;i&lt;inputList.length;i++){
	Boolean test = respData.contains(inputList[i]);
	log.info(&quot;test : &quot;+ inputList[i]);

	if(test != true){
	  AssertionResult.setFailure(true);
	  AssertionResult.setError(true);
	  AssertionResult.setFailureMessage(&quot;Failed for contains &quot;+inputList[i]);
	  SampleResult.setSuccessful(false);
	  return;
	}
}
</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Assertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="eni-todo-complete-my-task-value">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="todoList[${task-value-index}].id" elementType="HTTPArgument">
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">todoList[${task-value-index}].id</stringProp>
                <stringProp name="Argument.value">${task-value-index-dtb}</stringProp>
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
              </elementProp>
              <elementProp name="todoList[${task-value-index}].name" elementType="HTTPArgument">
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">todoList[${task-value-index}].name</stringProp>
                <stringProp name="Argument.value">my-task-value-${rvid}</stringProp>
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
              </elementProp>
              <elementProp name="todoList[${task-value-index}].category" elementType="HTTPArgument">
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">todoList[${task-value-index}].category</stringProp>
                <stringProp name="Argument.value">cat-${rvid}</stringProp>
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
              </elementProp>
              <elementProp name="todoList[${task-value-index}].filename" elementType="HTTPArgument">
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">todoList[${task-value-index}].filename</stringProp>
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
              </elementProp>
              <elementProp name="_todoList[${task-value-index}].onlyinsession" elementType="HTTPArgument">
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">_todoList[${task-value-index}].onlyinsession</stringProp>
                <stringProp name="Argument.value">on</stringProp>
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
              </elementProp>
              <elementProp name="_todoList[${task-value-index}].complete" elementType="HTTPArgument">
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">_todoList[${task-value-index}].complete</stringProp>
                <stringProp name="Argument.value">on</stringProp>
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
              </elementProp>
              <elementProp name="todoList[${task-value-index}].complete" elementType="HTTPArgument">
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">todoList[${task-value-index}].complete</stringProp>
                <stringProp name="Argument.value">true</stringProp>
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
              </elementProp>
              <elementProp name="_todoList[${task-value-index}].delete" elementType="HTTPArgument">
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">_todoList[${task-value-index}].delete</stringProp>
                <stringProp name="Argument.value">on</stringProp>
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
              </elementProp>
              <elementProp name="todoList[${task-value-with-image-index}].id" elementType="HTTPArgument">
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">todoList[${task-value-with-image-index}].id</stringProp>
                <stringProp name="Argument.value">${task-value-with-image-index-dtb}</stringProp>
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
              </elementProp>
              <elementProp name="todoList[${task-value-with-image-index}].name" elementType="HTTPArgument">
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">todoList[${task-value-with-image-index}].name</stringProp>
                <stringProp name="Argument.value">my-task-value-with-image-${rvid}</stringProp>
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
              </elementProp>
              <elementProp name="todoList[${task-value-with-image-index}].category" elementType="HTTPArgument">
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">todoList[${task-value-with-image-index}].category</stringProp>
                <stringProp name="Argument.value">cat-${rvid}</stringProp>
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
              </elementProp>
              <elementProp name="todoList[${task-value-with-image-index}].filename" elementType="HTTPArgument">
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">todoList[${task-value-with-image-index}].filename</stringProp>
                <stringProp name="Argument.value">test.jpg</stringProp>
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
              </elementProp>
              <elementProp name="_todoList[${task-value-with-image-index}].onlyinsession" elementType="HTTPArgument">
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">_todoList[${task-value-with-image-index}].onlyinsession</stringProp>
                <stringProp name="Argument.value">on</stringProp>
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
              </elementProp>
              <elementProp name="_todoList[${task-value-with-image-index}].complete" elementType="HTTPArgument">
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">_todoList[${task-value-with-image-index}].complete</stringProp>
                <stringProp name="Argument.value">on</stringProp>
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
              </elementProp>
              <elementProp name="todoList[${task-value-with-image-index}].complete" elementType="HTTPArgument">
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">todoList[${task-value-with-image-index}].complete</stringProp>
                <stringProp name="Argument.value">true</stringProp>
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
              </elementProp>
              <elementProp name="_todoList[${task-value-with-image-index}].delete" elementType="HTTPArgument">
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">_todoList[${task-value-with-image-index}].delete</stringProp>
                <stringProp name="Argument.value">on</stringProp>
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
              </elementProp>
              <elementProp name="todoList[${task-value-while-having-draft-index}].id" elementType="HTTPArgument">
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">todoList[${task-value-while-having-draft-index}].id</stringProp>
                <stringProp name="Argument.value">${task-value-while-having-draft-index-dtb}</stringProp>
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
              </elementProp>
              <elementProp name="todoList[${task-value-while-having-draft-index}].name" elementType="HTTPArgument">
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">todoList[${task-value-while-having-draft-index}].name</stringProp>
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.value">my-task-value-while-having-draft-${rvid}</stringProp>
              </elementProp>
              <elementProp name="todoList[${task-value-while-having-draft-index}].category" elementType="HTTPArgument">
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">todoList[${task-value-while-having-draft-index}].category</stringProp>
                <stringProp name="Argument.value">cat-${rvid}</stringProp>
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
              </elementProp>
              <elementProp name="todoList[${task-value-while-having-draft-index}].filename" elementType="HTTPArgument">
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">todoList[${task-value-while-having-draft-index}].filename</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
              </elementProp>
              <elementProp name="todoList[${task-value-while-having-draft-index}].complete" elementType="HTTPArgument">
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">todoList[${task-value-while-having-draft-index}].complete</stringProp>
                <stringProp name="Argument.value">true</stringProp>
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
              </elementProp>
              <elementProp name="_todoList[${task-value-while-having-draft-index}].onlyinsession" elementType="HTTPArgument">
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">_todoList[${task-value-while-having-draft-index}].onlyinsession</stringProp>
                <stringProp name="Argument.value">on</stringProp>
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
              </elementProp>
              <elementProp name="_todoList[${task-value-while-having-draft-index}].delete" elementType="HTTPArgument">
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">_todoList[${task-value-while-having-draft-index}].delete</stringProp>
                <stringProp name="Argument.value">on</stringProp>
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
              </elementProp>
              <elementProp name="todoList[${task-value-draft-index}].id" elementType="HTTPArgument">
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">todoList[${task-value-draft-index}].id</stringProp>
                <stringProp name="Argument.value">${task-value-draft-index-dtb}</stringProp>
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
              </elementProp>
              <elementProp name="todoList[${task-value-draft-index}].name" elementType="HTTPArgument">
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">todoList[${task-value-draft-index}].name</stringProp>
                <stringProp name="Argument.value">my-task-value-draft-${rvid-mem}</stringProp>
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
              </elementProp>
              <elementProp name="todoList[${task-value-draft-index}].category" elementType="HTTPArgument">
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">todoList[${task-value-draft-index}].category</stringProp>
                <stringProp name="Argument.value">cat-${rvid}</stringProp>
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
              </elementProp>
              <elementProp name="todoList[${task-value-draft-index}].filename" elementType="HTTPArgument">
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">todoList[${task-value-draft-index}].filename</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
              </elementProp>
              <elementProp name="todoList[${task-value-draft-index}].onlyinsession" elementType="HTTPArgument">
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">todoList[${task-value-draft-index}].onlyinsession</stringProp>
                <stringProp name="Argument.value">true</stringProp>
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
              </elementProp>
              <elementProp name="_todoList[${task-value-draft-index}].onlyinsession" elementType="HTTPArgument">
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">_todoList[${task-value-draft-index}].onlyinsession</stringProp>
                <stringProp name="Argument.value">on</stringProp>
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
              </elementProp>
              <elementProp name="_todoList[${task-value-draft-index}].complete" elementType="HTTPArgument">
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">_todoList[${task-value-draft-index}].complete</stringProp>
                <stringProp name="Argument.value">on</stringProp>
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
              </elementProp>
              <elementProp name="_todoList[${task-value-draft-index}].delete" elementType="HTTPArgument">
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">_todoList[${task-value-draft-index}].delete</stringProp>
                <stringProp name="Argument.value">on</stringProp>
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.port">8080</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">${webcontext}/update</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
          <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Sec-Fetch-Mode" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                <stringProp name="Header.value">navigate</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">${scheme}://${host}:8080/eni-todo/</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Site" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                <stringProp name="Header.value">same-origin</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Origin" elementType="Header">
                <stringProp name="Header.name">Origin</stringProp>
                <stringProp name="Header.value">${scheme}://${host}:8080</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-User" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-User</stringProp>
                <stringProp name="Header.value">?1</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8</stringProp>
              </elementProp>
              <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">X-User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:125.0) Gecko/20100101 Firefox/125.0</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Dest" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                <stringProp name="Header.value">document</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">X-debug</stringProp>
                <stringProp name="Header.value">${rvid}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">String respData = prev.getResponseDataAsString();

String taskName=&quot;my-task-value-${rvid}&quot;;
String indexValueDtb = vars.get(&quot;task-value-index-dtb&quot;);
String indexValueFront = vars.get(&quot;task-value-index&quot;);


log.info (&quot;indexValueDtb :&quot;+indexValueDtb);

String[] inputList = [
                &quot;&lt;td&gt;${taskName}&lt;/td&gt;&quot;,
                &quot;&lt;input type=\&quot;hidden\&quot; id=\&quot;todoList${indexValueFront}.name\&quot; name=\&quot;todoList[${indexValueFront}].name\&quot; value=\&quot;${taskName}\&quot;/&gt;&quot;,
                &quot;&lt;td&gt;cat-${rvid}&lt;/td&gt;&lt;input type=\&quot;hidden\&quot; id=\&quot;todoList${indexValueFront}.category\&quot; name=\&quot;todoList[${indexValueFront}].category\&quot; value=\&quot;cat-${rvid}\&quot;/&gt;&quot;,
                 &quot;&lt;input type=\&quot;checkbox\&quot; id=\&quot;todoList${indexValueFront}.onlyinsession1\&quot; name=\&quot;todoList[${indexValueFront}].onlyinsession\&quot; value=\&quot;true\&quot;/&gt;&lt;input type=\&quot;hidden\&quot; name=\&quot;_todoList[${indexValueFront}].onlyinsession\&quot; value=\&quot;on\&quot;/&gt;&quot;,
                &quot;&lt;input type=\&quot;checkbox\&quot; checked=\&quot;checked\&quot; id=\&quot;todoList${indexValueFront}.complete1\&quot; name=\&quot;todoList[${indexValueFront}].complete\&quot; value=\&quot;true\&quot;/&gt;&lt;input type=\&quot;hidden\&quot; name=\&quot;_todoList[${indexValueFront}].complete\&quot; value=\&quot;on\&quot;/&gt;&quot;,
                &quot;&lt;input type=\&quot;checkbox\&quot; id=\&quot;todoList${indexValueFront}.delete1\&quot; name=\&quot;todoList[${indexValueFront}].delete\&quot; value=\&quot;true\&quot;/&gt;&lt;input type=\&quot;hidden\&quot; name=\&quot;_todoList[${indexValueFront}].delete\&quot; value=\&quot;on\&quot;/&gt;&quot;,
                &quot;&lt;td&gt;my-task-value-draft-${rvid-mem}&lt;/td&gt;&quot;];

for(int i=0;i&lt;inputList.length;i++){
	Boolean test = respData.contains(inputList[i]);
	log.info(&quot;test : &quot;+ inputList[i]);

	if(test != true){
	  AssertionResult.setFailure(true);
	  AssertionResult.setError(true);
	  AssertionResult.setFailureMessage(&quot;Failed for contains &quot;+inputList[i]);
	  SampleResult.setSuccessful(false);
	  return;
	}
}
</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Assertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="eni-todo-delete-my-task-value-draft">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="todoList[${task-value-index}].id" elementType="HTTPArgument">
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">todoList[${task-value-index}].id</stringProp>
                <stringProp name="Argument.value">${task-value-index-dtb}</stringProp>
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
              </elementProp>
              <elementProp name="todoList[${task-value-index}].name" elementType="HTTPArgument">
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">todoList[${task-value-index}].name</stringProp>
                <stringProp name="Argument.value">my-task-value-${rvid}</stringProp>
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
              </elementProp>
              <elementProp name="todoList[${task-value-index}].category" elementType="HTTPArgument">
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">todoList[${task-value-index}].category</stringProp>
                <stringProp name="Argument.value">cat-${rvid}</stringProp>
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
              </elementProp>
              <elementProp name="todoList[${task-value-index}].filename" elementType="HTTPArgument">
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">todoList[${task-value-index}].filename</stringProp>
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
              </elementProp>
              <elementProp name="_todoList[${task-value-index}].onlyinsession" elementType="HTTPArgument">
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">_todoList[${task-value-index}].onlyinsession</stringProp>
                <stringProp name="Argument.value">on</stringProp>
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
              </elementProp>
              <elementProp name="_todoList[${task-value-index}].complete" elementType="HTTPArgument">
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">_todoList[${task-value-index}].complete</stringProp>
                <stringProp name="Argument.value">on</stringProp>
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
              </elementProp>
              <elementProp name="todoList[${task-value-index}].complete" elementType="HTTPArgument">
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">todoList[${task-value-index}].complete</stringProp>
                <stringProp name="Argument.value">true</stringProp>
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
              </elementProp>
              <elementProp name="_todoList[${task-value-index}].delete" elementType="HTTPArgument">
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">_todoList[${task-value-index}].delete</stringProp>
                <stringProp name="Argument.value">on</stringProp>
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
              </elementProp>
              <elementProp name="todoList[${task-value-with-image-index}].id" elementType="HTTPArgument">
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">todoList[${task-value-with-image-index}].id</stringProp>
                <stringProp name="Argument.value">${task-value-with-image-index-dtb}</stringProp>
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
              </elementProp>
              <elementProp name="todoList[${task-value-with-image-index}].name" elementType="HTTPArgument">
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">todoList[${task-value-with-image-index}].name</stringProp>
                <stringProp name="Argument.value">my-task-value-with-image-${rvid}</stringProp>
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
              </elementProp>
              <elementProp name="todoList[${task-value-with-image-index}].category" elementType="HTTPArgument">
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">todoList[${task-value-with-image-index}].category</stringProp>
                <stringProp name="Argument.value">cat-${rvid}</stringProp>
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
              </elementProp>
              <elementProp name="todoList[${task-value-with-image-index}].filename" elementType="HTTPArgument">
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">todoList[${task-value-with-image-index}].filename</stringProp>
                <stringProp name="Argument.value">test.jpg</stringProp>
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
              </elementProp>
              <elementProp name="_todoList[${task-value-with-image-index}].onlyinsession" elementType="HTTPArgument">
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">_todoList[${task-value-with-image-index}].onlyinsession</stringProp>
                <stringProp name="Argument.value">on</stringProp>
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
              </elementProp>
              <elementProp name="_todoList[${task-value-with-image-index}].complete" elementType="HTTPArgument">
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">_todoList[${task-value-with-image-index}].complete</stringProp>
                <stringProp name="Argument.value">on</stringProp>
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
              </elementProp>
              <elementProp name="todoList[${task-value-with-image-index}].complete" elementType="HTTPArgument">
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">todoList[${task-value-with-image-index}].complete</stringProp>
                <stringProp name="Argument.value">true</stringProp>
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
              </elementProp>
              <elementProp name="_todoList[${task-value-with-image-index}].delete" elementType="HTTPArgument">
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">_todoList[${task-value-with-image-index}].delete</stringProp>
                <stringProp name="Argument.value">on</stringProp>
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
              </elementProp>
              <elementProp name="todoList[${task-value-while-having-draft-index}].id" elementType="HTTPArgument">
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">todoList[${task-value-while-having-draft-index}].id</stringProp>
                <stringProp name="Argument.value">${task-value-while-having-draft-index-dtb}</stringProp>
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
              </elementProp>
              <elementProp name="todoList[${task-value-while-having-draft-index}].name" elementType="HTTPArgument">
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">todoList[${task-value-while-having-draft-index}].name</stringProp>
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.value">my-task-value-while-having-draft-${rvid}</stringProp>
              </elementProp>
              <elementProp name="todoList[${task-value-while-having-draft-index}].category" elementType="HTTPArgument">
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">todoList[${task-value-while-having-draft-index}].category</stringProp>
                <stringProp name="Argument.value">cat-${rvid}</stringProp>
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
              </elementProp>
              <elementProp name="todoList[${task-value-while-having-draft-index}].filename" elementType="HTTPArgument">
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">todoList[${task-value-while-having-draft-index}].filename</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
              </elementProp>
              <elementProp name="todoList[${task-value-while-having-draft-index}].complete" elementType="HTTPArgument">
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">todoList[${task-value-while-having-draft-index}].complete</stringProp>
                <stringProp name="Argument.value">true</stringProp>
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
              </elementProp>
              <elementProp name="_todoList[${task-value-while-having-draft-index}].onlyinsession" elementType="HTTPArgument">
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">_todoList[${task-value-while-having-draft-index}].onlyinsession</stringProp>
                <stringProp name="Argument.value">on</stringProp>
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
              </elementProp>
              <elementProp name="_todoList[${task-value-while-having-draft-index}].delete" elementType="HTTPArgument">
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">_todoList[${task-value-while-having-draft-index}].delete</stringProp>
                <stringProp name="Argument.value">on</stringProp>
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
              </elementProp>
              <elementProp name="todoList[${task-value-draft-index}].id" elementType="HTTPArgument">
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">todoList[${task-value-draft-index}].id</stringProp>
                <stringProp name="Argument.value">${task-value-draft-index-dtb}</stringProp>
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
              </elementProp>
              <elementProp name="todoList[${task-value-draft-index}].name" elementType="HTTPArgument">
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">todoList[${task-value-draft-index}].name</stringProp>
                <stringProp name="Argument.value">my-task-value-draft-${rvid-mem}</stringProp>
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
              </elementProp>
              <elementProp name="todoList[${task-value-draft-index}].category" elementType="HTTPArgument">
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">todoList[${task-value-draft-index}].category</stringProp>
                <stringProp name="Argument.value">cat-${rvid}</stringProp>
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
              </elementProp>
              <elementProp name="todoList[${task-value-draft-index}].filename" elementType="HTTPArgument">
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">todoList[${task-value-draft-index}].filename</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
              </elementProp>
              <elementProp name="todoList[${task-value-draft-index}].onlyinsession" elementType="HTTPArgument">
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">todoList[${task-value-draft-index}].onlyinsession</stringProp>
                <stringProp name="Argument.value">true</stringProp>
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
              </elementProp>
              <elementProp name="_todoList[${task-value-draft-index}].onlyinsession" elementType="HTTPArgument">
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">_todoList[${task-value-draft-index}].onlyinsession</stringProp>
                <stringProp name="Argument.value">on</stringProp>
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
              </elementProp>
              <elementProp name="_todoList[${task-value-draft-index}].complete" elementType="HTTPArgument">
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">_todoList[${task-value-draft-index}].complete</stringProp>
                <stringProp name="Argument.value">on</stringProp>
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
              </elementProp>
              <elementProp name="_todoList[${task-value-draft-index}].delete" elementType="HTTPArgument">
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">_todoList[${task-value-draft-index}].delete</stringProp>
                <stringProp name="Argument.value">on</stringProp>
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
              </elementProp>
              <elementProp name="todoList[${task-value-draft-index}].delete" elementType="HTTPArgument">
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">todoList[${task-value-draft-index}].delete</stringProp>
                <stringProp name="Argument.value">true</stringProp>
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.port">8080</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">${webcontext}/update</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
          <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Sec-Fetch-Mode" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                <stringProp name="Header.value">navigate</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">${scheme}://${host}:8080/eni-todo/</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Site" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                <stringProp name="Header.value">same-origin</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Origin" elementType="Header">
                <stringProp name="Header.name">Origin</stringProp>
                <stringProp name="Header.value">${scheme}://${host}:8080</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-User" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-User</stringProp>
                <stringProp name="Header.value">?1</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8</stringProp>
              </elementProp>
              <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">X-User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:125.0) Gecko/20100101 Firefox/125.0</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Dest" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                <stringProp name="Header.value">document</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">X-debug</stringProp>
                <stringProp name="Header.value">${rvid}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">String respData = prev.getResponseDataAsString();

String taskName=&quot;my-task-value-${rvid}&quot;;
String indexValueDtb = vars.get(&quot;task-value-index-dtb&quot;);
String indexValueFront = vars.get(&quot;task-value-index&quot;);


log.info (&quot;indexValueDtb :&quot;+indexValueDtb);

String[] inputList = [
                &quot;&lt;td&gt;my-task-value-draft-${rvid-mem}&lt;/td&gt;&quot;];

for(int i=0;i&lt;inputList.length;i++){
	Boolean test = respData.contains(inputList[i]);
	log.info(&quot;test : &quot;+ inputList[i]);

	if(test == true){
	  AssertionResult.setFailure(true);
	  AssertionResult.setError(true);
	  AssertionResult.setFailureMessage(&quot;Failed for contains &quot;+inputList[i]);
	  SampleResult.setSuccessful(false);
	  return;
	}
}
</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Assertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="eni-todo-delete-my-task-value-while-having-draft">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="todoList[${task-value-index}].id" elementType="HTTPArgument">
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">todoList[${task-value-index}].id</stringProp>
                <stringProp name="Argument.value">${task-value-index-dtb}</stringProp>
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
              </elementProp>
              <elementProp name="todoList[${task-value-index}].name" elementType="HTTPArgument">
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">todoList[${task-value-index}].name</stringProp>
                <stringProp name="Argument.value">my-task-value-${rvid}</stringProp>
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
              </elementProp>
              <elementProp name="todoList[${task-value-index}].category" elementType="HTTPArgument">
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">todoList[${task-value-index}].category</stringProp>
                <stringProp name="Argument.value">cat-${rvid}</stringProp>
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
              </elementProp>
              <elementProp name="todoList[${task-value-index}].filename" elementType="HTTPArgument">
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">todoList[${task-value-index}].filename</stringProp>
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
              </elementProp>
              <elementProp name="_todoList[${task-value-index}].onlyinsession" elementType="HTTPArgument">
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">_todoList[${task-value-index}].onlyinsession</stringProp>
                <stringProp name="Argument.value">on</stringProp>
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
              </elementProp>
              <elementProp name="_todoList[${task-value-index}].complete" elementType="HTTPArgument">
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">_todoList[${task-value-index}].complete</stringProp>
                <stringProp name="Argument.value">on</stringProp>
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
              </elementProp>
              <elementProp name="_todoList[${task-value-index}].delete" elementType="HTTPArgument">
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">_todoList[${task-value-index}].delete</stringProp>
                <stringProp name="Argument.value">on</stringProp>
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
              </elementProp>
              <elementProp name="todoList[${task-value-with-image-index}].id" elementType="HTTPArgument">
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">todoList[${task-value-with-image-index}].id</stringProp>
                <stringProp name="Argument.value">${task-value-with-image-index-dtb}</stringProp>
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
              </elementProp>
              <elementProp name="todoList[${task-value-with-image-index}].name" elementType="HTTPArgument">
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">todoList[${task-value-with-image-index}].name</stringProp>
                <stringProp name="Argument.value">my-task-value-with-image-${rvid}</stringProp>
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
              </elementProp>
              <elementProp name="todoList[${task-value-with-image-index}].category" elementType="HTTPArgument">
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">todoList[${task-value-with-image-index}].category</stringProp>
                <stringProp name="Argument.value">cat-${rvid}</stringProp>
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
              </elementProp>
              <elementProp name="todoList[${task-value-with-image-index}].filename" elementType="HTTPArgument">
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">todoList[${task-value-with-image-index}].filename</stringProp>
                <stringProp name="Argument.value">test.jpg</stringProp>
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
              </elementProp>
              <elementProp name="_todoList[${task-value-with-image-index}].onlyinsession" elementType="HTTPArgument">
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">_todoList[${task-value-with-image-index}].onlyinsession</stringProp>
                <stringProp name="Argument.value">on</stringProp>
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
              </elementProp>
              <elementProp name="_todoList[${task-value-with-image-index}].complete" elementType="HTTPArgument">
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">_todoList[${task-value-with-image-index}].complete</stringProp>
                <stringProp name="Argument.value">on</stringProp>
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
              </elementProp>
              <elementProp name="_todoList[${task-value-with-image-index}].delete" elementType="HTTPArgument">
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">_todoList[${task-value-with-image-index}].delete</stringProp>
                <stringProp name="Argument.value">on</stringProp>
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
              </elementProp>
              <elementProp name="todoList[${task-value-while-having-draft-index}].id" elementType="HTTPArgument">
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">todoList[${task-value-while-having-draft-index}].id</stringProp>
                <stringProp name="Argument.value">${task-value-while-having-draft-index-dtb}</stringProp>
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
              </elementProp>
              <elementProp name="todoList[${task-value-while-having-draft-index}].name" elementType="HTTPArgument">
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">todoList[${task-value-while-having-draft-index}].name</stringProp>
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.value">my-task-value-while-having-draft-${rvid}</stringProp>
              </elementProp>
              <elementProp name="todoList[${task-value-while-having-draft-index}].category" elementType="HTTPArgument">
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">todoList[${task-value-while-having-draft-index}].category</stringProp>
                <stringProp name="Argument.value">cat-${rvid}</stringProp>
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
              </elementProp>
              <elementProp name="todoList[${task-value-while-having-draft-index}].filename" elementType="HTTPArgument">
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">todoList[${task-value-while-having-draft-index}].filename</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
              </elementProp>
              <elementProp name="todoList[${task-value-while-having-draft-index}].complete" elementType="HTTPArgument">
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">todoList[${task-value-while-having-draft-index}].complete</stringProp>
                <stringProp name="Argument.value">true</stringProp>
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
              </elementProp>
              <elementProp name="_todoList[${task-value-while-having-draft-index}].onlyinsession" elementType="HTTPArgument">
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">_todoList[${task-value-while-having-draft-index}].onlyinsession</stringProp>
                <stringProp name="Argument.value">on</stringProp>
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
              </elementProp>
              <elementProp name="todoList[${task-value-while-having-draft-index}].delete" elementType="HTTPArgument">
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">todoList[${task-value-while-having-draft-index}].delete</stringProp>
                <stringProp name="Argument.value">true</stringProp>
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
              </elementProp>
              <elementProp name="_todoList[${task-value-while-having-draft-index}].delete" elementType="HTTPArgument">
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">_todoList[${task-value-while-having-draft-index}].delete</stringProp>
                <stringProp name="Argument.value">on</stringProp>
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.port">8080</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">${webcontext}/update</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
          <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Sec-Fetch-Mode" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                <stringProp name="Header.value">navigate</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">${scheme}://${host}:8080/eni-todo/</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Site" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                <stringProp name="Header.value">same-origin</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Origin" elementType="Header">
                <stringProp name="Header.name">Origin</stringProp>
                <stringProp name="Header.value">${scheme}://${host}:8080</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-User" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-User</stringProp>
                <stringProp name="Header.value">?1</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8</stringProp>
              </elementProp>
              <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">X-User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:125.0) Gecko/20100101 Firefox/125.0</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Dest" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                <stringProp name="Header.value">document</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">X-debug</stringProp>
                <stringProp name="Header.value">${rvid}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">String respData = prev.getResponseDataAsString();

String taskName=&quot;my-task-value-while-having-draft-${rvid}&quot;;
String indexValueDtb = vars.get(&quot;task-value-while-having-draft-index-dtb&quot;);
String indexValueFront = vars.get(&quot;task-value-while-having-draft-index&quot;);


log.info (&quot;indexValueDtb :&quot;+indexValueDtb);

String[] inputList = [
                &quot;&lt;td&gt;${taskName}&lt;/td&gt;&quot;,
                &quot;&lt;input type=\&quot;hidden\&quot; id=\&quot;todoList${indexValueFront}.name\&quot; name=\&quot;todoList[${indexValueFront}].name\&quot; value=\&quot;${taskName}\&quot;/&gt;&quot;,                 
                &quot;&lt;td&gt;my-task-value-draft-${rvid-mem}&lt;/td&gt;&quot;
                ];

for(int i=0;i&lt;inputList.length;i++){
	Boolean test = respData.contains(inputList[i]);
	log.info(&quot;test : &quot;+ inputList[i]);

	if(test == true){
	  AssertionResult.setFailure(true);
	  AssertionResult.setError(true);
	  AssertionResult.setFailureMessage(&quot;Failed for contains &quot;+inputList[i]);
	  SampleResult.setSuccessful(false);
	  return;
	}
}
</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Assertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="eni-todo-delete-my-task-value-with-image">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="todoList[${task-value-index}].id" elementType="HTTPArgument">
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">todoList[${task-value-index}].id</stringProp>
                <stringProp name="Argument.value">${task-value-index-dtb}</stringProp>
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
              </elementProp>
              <elementProp name="todoList[${task-value-index}].name" elementType="HTTPArgument">
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">todoList[${task-value-index}].name</stringProp>
                <stringProp name="Argument.value">my-task-value-${rvid}</stringProp>
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
              </elementProp>
              <elementProp name="todoList[${task-value-index}].category" elementType="HTTPArgument">
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">todoList[${task-value-index}].category</stringProp>
                <stringProp name="Argument.value">cat-${rvid}</stringProp>
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
              </elementProp>
              <elementProp name="todoList[${task-value-index}].filename" elementType="HTTPArgument">
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">todoList[${task-value-index}].filename</stringProp>
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
              </elementProp>
              <elementProp name="_todoList[${task-value-index}].onlyinsession" elementType="HTTPArgument">
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">_todoList[${task-value-index}].onlyinsession</stringProp>
                <stringProp name="Argument.value">on</stringProp>
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
              </elementProp>
              <elementProp name="_todoList[${task-value-index}].complete" elementType="HTTPArgument">
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">_todoList[${task-value-index}].complete</stringProp>
                <stringProp name="Argument.value">on</stringProp>
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
              </elementProp>
              <elementProp name="_todoList[${task-value-index}].delete" elementType="HTTPArgument">
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">_todoList[${task-value-index}].delete</stringProp>
                <stringProp name="Argument.value">on</stringProp>
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
              </elementProp>
              <elementProp name="todoList[${task-value-with-image-index}].id" elementType="HTTPArgument">
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">todoList[${task-value-with-image-index}].id</stringProp>
                <stringProp name="Argument.value">${task-value-with-image-index-dtb}</stringProp>
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
              </elementProp>
              <elementProp name="todoList[${task-value-with-image-index}].name" elementType="HTTPArgument">
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">todoList[${task-value-with-image-index}].name</stringProp>
                <stringProp name="Argument.value">my-task-value-with-image-${rvid}</stringProp>
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
              </elementProp>
              <elementProp name="todoList[${task-value-with-image-index}].category" elementType="HTTPArgument">
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">todoList[${task-value-with-image-index}].category</stringProp>
                <stringProp name="Argument.value">cat-${rvid}</stringProp>
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
              </elementProp>
              <elementProp name="todoList[${task-value-with-image-index}].filename" elementType="HTTPArgument">
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">todoList[${task-value-with-image-index}].filename</stringProp>
                <stringProp name="Argument.value">test.jpg</stringProp>
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
              </elementProp>
              <elementProp name="_todoList[${task-value-with-image-index}].onlyinsession" elementType="HTTPArgument">
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">_todoList[${task-value-with-image-index}].onlyinsession</stringProp>
                <stringProp name="Argument.value">on</stringProp>
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
              </elementProp>
              <elementProp name="_todoList[${task-value-with-image-index}].complete" elementType="HTTPArgument">
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">_todoList[${task-value-with-image-index}].complete</stringProp>
                <stringProp name="Argument.value">on</stringProp>
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
              </elementProp>
              <elementProp name="todoList[${task-value-with-image-index}].complete" elementType="HTTPArgument">
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">todoList[${task-value-with-image-index}].complete</stringProp>
                <stringProp name="Argument.value">true</stringProp>
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
              </elementProp>
              <elementProp name="todoList[${task-value-with-image-index}].delete" elementType="HTTPArgument">
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">todoList[${task-value-with-image-index}].delete</stringProp>
                <stringProp name="Argument.value">true</stringProp>
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
              </elementProp>
              <elementProp name="_todoList[${task-value-with-image-index}].delete" elementType="HTTPArgument">
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">_todoList[${task-value-with-image-index}].delete</stringProp>
                <stringProp name="Argument.value">on</stringProp>
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.port">8080</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">${webcontext}/update</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
          <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Sec-Fetch-Mode" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                <stringProp name="Header.value">navigate</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">${scheme}://${host}:8080/eni-todo/</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Site" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                <stringProp name="Header.value">same-origin</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Origin" elementType="Header">
                <stringProp name="Header.name">Origin</stringProp>
                <stringProp name="Header.value">${scheme}://${host}:8080</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-User" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-User</stringProp>
                <stringProp name="Header.value">?1</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8</stringProp>
              </elementProp>
              <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">X-User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:125.0) Gecko/20100101 Firefox/125.0</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Dest" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                <stringProp name="Header.value">document</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">X-debug</stringProp>
                <stringProp name="Header.value">${rvid}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">String respData = prev.getResponseDataAsString();

String taskName=&quot;my-task-value-with-image-${rvid}&quot;;
String indexValueDtb = vars.get(&quot;task-value-with-image-index-dtb&quot;);
String indexValueFront = vars.get(&quot;task-value-with-image-index&quot;);


log.info (&quot;indexValueDtb :&quot;+indexValueDtb);

// we still have a category at previous index

String[] inputList = [
                &quot;&lt;td&gt;${taskName}&lt;/td&gt;&quot;,
                &quot;&lt;input type=\&quot;hidden\&quot; id=\&quot;todoList${indexValueFront}.name\&quot; name=\&quot;todoList[${indexValueFront}].name\&quot; value=\&quot;${taskName}\&quot;/&gt;&quot;,
                
                &quot;&lt;td&gt;my-task-value-while-having-draft-${rvid}&lt;/td&gt;&quot;,
                &quot;&lt;td&gt;my-task-value-draft-${rvid-mem}&lt;/td&gt;&quot;
                ];

for(int i=0;i&lt;inputList.length;i++){
	Boolean test = respData.contains(inputList[i]);
	log.info(&quot;test : &quot;+ inputList[i]);

	if(test == true){
	  AssertionResult.setFailure(true);
	  AssertionResult.setError(true);
	  AssertionResult.setFailureMessage(&quot;Failed for contains &quot;+inputList[i]);
	  SampleResult.setSuccessful(false);
	  return;
	}
}
</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Assertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="eni-todo-delete-my-task-value">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="todoList[${task-value-index}].id" elementType="HTTPArgument">
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">todoList[${task-value-index}].id</stringProp>
                <stringProp name="Argument.value">${task-value-index-dtb}</stringProp>
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
              </elementProp>
              <elementProp name="todoList[${task-value-index}].name" elementType="HTTPArgument">
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">todoList[${task-value-index}].name</stringProp>
                <stringProp name="Argument.value">my-task-value-${rvid}</stringProp>
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
              </elementProp>
              <elementProp name="todoList[${task-value-index}].category" elementType="HTTPArgument">
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">todoList[${task-value-index}].category</stringProp>
                <stringProp name="Argument.value">cat-${rvid}</stringProp>
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
              </elementProp>
              <elementProp name="todoList[${task-value-index}].filename" elementType="HTTPArgument">
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">todoList[${task-value-index}].filename</stringProp>
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
              </elementProp>
              <elementProp name="_todoList[${task-value-index}].onlyinsession" elementType="HTTPArgument">
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">_todoList[${task-value-index}].onlyinsession</stringProp>
                <stringProp name="Argument.value">on</stringProp>
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
              </elementProp>
              <elementProp name="_todoList[${task-value-index}].complete" elementType="HTTPArgument">
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">_todoList[${task-value-index}].complete</stringProp>
                <stringProp name="Argument.value">on</stringProp>
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
              </elementProp>
              <elementProp name="todoList[${task-value-index}].complete" elementType="HTTPArgument">
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">todoList[${task-value-index}].complete</stringProp>
                <stringProp name="Argument.value">true</stringProp>
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
              </elementProp>
              <elementProp name="todoList[${task-value-index}].delete" elementType="HTTPArgument">
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">todoList[${task-value-index}].delete</stringProp>
                <stringProp name="Argument.value">true</stringProp>
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
              </elementProp>
              <elementProp name="_todoList[${task-value-index}].delete" elementType="HTTPArgument">
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">_todoList[${task-value-index}].delete</stringProp>
                <stringProp name="Argument.value">on</stringProp>
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.port">8080</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">${webcontext}/update</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
          <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Sec-Fetch-Mode" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                <stringProp name="Header.value">navigate</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">${scheme}://${host}:8080/eni-todo/</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Site" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                <stringProp name="Header.value">same-origin</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Origin" elementType="Header">
                <stringProp name="Header.name">Origin</stringProp>
                <stringProp name="Header.value">${scheme}://${host}:8080</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-User" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-User</stringProp>
                <stringProp name="Header.value">?1</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8</stringProp>
              </elementProp>
              <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">X-User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:125.0) Gecko/20100101 Firefox/125.0</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Dest" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                <stringProp name="Header.value">document</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">X-debug</stringProp>
                <stringProp name="Header.value">${rvid}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">String respData = prev.getResponseDataAsString();

String taskName=&quot;my-task-value-${rvid}&quot;;
String indexValueDtb = vars.get(&quot;task-value-index-dtb&quot;);
String indexValueFront = vars.get(&quot;task-value-index&quot;);


log.info (&quot;indexValueDtb :&quot;+indexValueDtb);

String[] inputList = [
                &quot;&lt;td&gt;${taskName}&lt;/td&gt;&quot;,
                &quot;&lt;input type=\&quot;hidden\&quot; id=\&quot;todoList${indexValueFront}.name\&quot; name=\&quot;todoList[${indexValueFront}].name\&quot; value=\&quot;${taskName}\&quot;/&gt;&quot;,

                 &quot;&lt;td&gt;my-task-value-while-having-draft-${rvid}&lt;/td&gt;&quot;,
                 &quot;&lt;td&gt;my-task-value-with-image-${rvid}&lt;/td&gt;&quot;,
             
                &quot;&lt;td&gt;my-task-value-draft-${rvid-mem}&lt;/td&gt;&quot;
                ];

for(int i=0;i&lt;inputList.length;i++){
	Boolean test = respData.contains(inputList[i]);
	log.info(&quot;test : &quot;+ inputList[i]);

	if(test == true){
	  AssertionResult.setFailure(true);
	  AssertionResult.setError(true);
	  AssertionResult.setFailureMessage(&quot;Failed for contains &quot;+inputList[i]);
	  SampleResult.setSuccessful(false);
	  return;
	}
}
</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Assertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>false</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>false</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>true</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>true</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <fileName>true</fileName>
            <hostname>true</hostname>
            <threadCounts>true</threadCounts>
            <sampleCount>true</sampleCount>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ProxyControl guiclass="ProxyControlGui" testclass="ProxyControl" testname="HTTP(S) Test Script Recorder" enabled="false">
        <stringProp name="ProxyControlGui.port">8888</stringProp>
        <collectionProp name="ProxyControlGui.exclude_list">
          <stringProp name="805311387">windowsupdate\.microsoft\.com.*</stringProp>
          <stringProp name="1179605444">(?i).*\.(bmp|css|js|gif|ico|jpe?g|png|swf|eot|otf|ttf|mp4|woff|woff2)</stringProp>
          <stringProp name="110431874">.*msg\.yahoo\.com.*</stringProp>
          <stringProp name="-88591710">www\.download\.windowsupdate\.com.*</stringProp>
          <stringProp name="1323576868">toolbarqueries\.google\..*</stringProp>
          <stringProp name="1739087931">http?://self-repair\.mozilla\.org.*</stringProp>
          <stringProp name="1206954446">tiles.*\.mozilla\.com.*</stringProp>
          <stringProp name="-1424663473">.*detectportal\.firefox\.com.*</stringProp>
          <stringProp name="-190610036">.*\.google\.com.*/safebrowsing/.*</stringProp>
          <stringProp name="-1899150273">api\.bing\.com.*</stringProp>
          <stringProp name="1779943373">us\.update\.toolbar\.yahoo\.com.*</stringProp>
          <stringProp name="-958112859">toolbar\.google\.com.*</stringProp>
          <stringProp name="-192420923">.*yimg\.com.*</stringProp>
          <stringProp name="-576820688">toolbar\.msn\.com.*</stringProp>
          <stringProp name="305776760">(?i).*\.(bmp|css|js|gif|ico|jpe?g|png|swf|eot|otf|ttf|mp4|woff|woff2)[\?;].*</stringProp>
          <stringProp name="-1435252351">toolbar\.avg\.com/.*</stringProp>
          <stringProp name="2118375536">www\.google-analytics\.com.*</stringProp>
          <stringProp name="-1279148329">pgq\.yahoo\.com.*</stringProp>
          <stringProp name="1815174768">safebrowsing.*\.google\.com.*</stringProp>
          <stringProp name="-1314416226">sqm\.microsoft\.com.*</stringProp>
          <stringProp name="587935979">g\.msn.*</stringProp>
          <stringProp name="1629558731">clients.*\.google.*</stringProp>
          <stringProp name="1726898318">geo\.yahoo\.com.*</stringProp>
          <stringProp name="11072252">.*toolbar\.yahoo\.com.*</stringProp>
        </collectionProp>
        <collectionProp name="ProxyControlGui.include_list"/>
        <boolProp name="ProxyControlGui.capture_http_headers">true</boolProp>
        <intProp name="ProxyControlGui.grouping_mode">4</intProp>
        <boolProp name="ProxyControlGui.add_assertion">false</boolProp>
        <stringProp name="ProxyControlGui.sampler_type_name">HttpClient4</stringProp>
        <boolProp name="ProxyControlGui.sampler_redirect_automatically">false</boolProp>
        <boolProp name="ProxyControlGui.sampler_follow_redirects">true</boolProp>
        <boolProp name="ProxyControlGui.use_keepalive">true</boolProp>
        <boolProp name="ProxyControlGui.sampler_download_images">false</boolProp>
        <boolProp name="ProxyControlGui.regex_match">true</boolProp>
        <stringProp name="ProxyControlGui.content_type_include"></stringProp>
        <stringProp name="ProxyControlGui.content_type_exclude"></stringProp>
        <boolProp name="ProxyControlGui.notify_child_sl_filtered">false</boolProp>
        <stringProp name="ProxyControlGui.proxy_prefix_http_sampler_name">eni-todo</stringProp>
        <intProp name="ProxyControlGui.proxy_http_sampler_naming_mode">1</intProp>
        <stringProp name="ProxyControlGui.proxy_pause_http_sampler">1000</stringProp>
        <boolProp name="ProxyControlGui.detect_graphql_request">true</boolProp>
        <stringProp name="ProxyControlGui.default_encoding">UTF-8</stringProp>
      </ProxyControl>
      <hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>true</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>true</responseData>
              <samplerData>true</samplerData>
              <xml>true</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>true</responseHeaders>
              <requestHeaders>true</requestHeaders>
              <responseDataOnError>true</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <url>true</url>
              <fileName>true</fileName>
              <hostname>true</hostname>
              <threadCounts>true</threadCounts>
              <sampleCount>true</sampleCount>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename">recording.xml</stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
